"use strict";

// Compute the precession matrix used for tranforming 
// the ra and dec from time T0 to T0+T
function precession_matrix(T0,T) {
    if (T0==0) {
        return precessionMatrixVondrak(T);
    } else {
        let p0 = precessionMatrixVondrak(T0);
        let p1 = precessionMatrixVondrak(T0+T);
        let p = {};
        // Inverse of p0 is the transpose of p0
        p.p11 = p1.p11*p0.p11 + p1.p12*p0.p12 + p1.p13*p0.p13;
        p.p12 = p1.p11*p0.p21 + p1.p12*p0.p22 + p1.p13*p0.p23;
        p.p13 = p1.p11*p0.p31 + p1.p12*p0.p32 + p1.p13*p0.p33;
        p.p21 = p1.p21*p0.p11 + p1.p22*p0.p12 + p1.p23*p0.p13;
        p.p22 = p1.p21*p0.p21 + p1.p22*p0.p22 + p1.p23*p0.p23;
        p.p23 = p1.p21*p0.p31 + p1.p22*p0.p32 + p1.p23*p0.p33;
        p.p31 = p1.p31*p0.p11 + p1.p32*p0.p12 + p1.p33*p0.p13;
        p.p32 = p1.p31*p0.p21 + p1.p32*p0.p22 + p1.p33*p0.p23;
        p.p33 = p1.p31*p0.p31 + p1.p32*p0.p32 + p1.p33*p0.p33;
        return p;
    }
}

// Compute the precession matrix used for tranforming 
// the ra and dec from time T0 to T0+T
// Equations given by Astronomy on Personal Computer, pp. 22-23
function precessionMatrixAstronomyOnPersonalComputer(T0,T) {
    let T0sq = T0*T0;
    let Tsq = T*T;
    let Tcube = Tsq*T;
    let sec_to_rad = Math.PI/180/3600;
    let zeta = (2306.2181+1.39656*T0-0.000139*T0sq)*T + 
        (0.30188-0.000345*T0)*Tsq + 0.017998*Tcube;
    zeta *= sec_to_rad;
    zeta -= 2*Math.PI*Math.floor(zeta*0.5/Math.PI);
    let cosZeta = Math.cos(zeta);
    let sinZeta = Math.sin(zeta);
    let theta = (2004.3109-0.8533*T0-0.000217*T0sq)*T + 
        (-0.42665-0.000217*T0)*Tsq - 0.041833*Tcube;
    theta *= sec_to_rad;
    theta -= 2*Math.PI*Math.floor(theta*0.5/Math.PI);
    let cosTheta = Math.cos(theta);
    let sinTheta = Math.sin(theta);
    let z = (0.7928+0.000411*T0)*Tsq + 0.000205*Tcube;
    z *= sec_to_rad;
    z -= 2*Math.PI*Math.floor(z*0.5/Math.PI);
    z += zeta;
    let cosZ = Math.cos(z);
    let sinZ = Math.sin(z);
    
    let p = {};
    p.p11 = -sinZ*sinZeta + cosZ*cosTheta*cosZeta;
    p.p12 = -sinZ*cosZeta - cosZ*cosTheta*sinZeta;
    p.p13 = -cosZ*sinTheta;
    p.p21 = cosZ*sinZeta + sinZ*cosTheta*cosZeta;
    p.p22 = cosZ*cosZeta - sinZ*cosTheta*sinZeta;
    p.p23 = -sinZ*sinTheta;
    p.p31 = sinTheta*cosZeta;
    p.p32 = -sinTheta*sinZeta;
    p.p33 = cosTheta;
    
    return p;
}

// Compute the precessed ra and dec at time T0+T from 
// the ra and dec at time T0 and the transformation 
// matrix p computed in precession_matri() above
// All angles are in radians
function precessed_ra_dec(ra0,dec0,p) {
    let x0 = Math.cos(dec0)*Math.cos(ra0);
    let y0 = Math.cos(dec0)*Math.sin(ra0);
    let z0 = Math.sin(dec0);
    let x = p.p11*x0 + p.p12*y0 + p.p13*z0;
    let y = p.p21*x0 + p.p22*y0 + p.p23*z0;
    let z = p.p31*x0 + p.p32*y0 + p.p33*z0;
    let dec = Math.asin(z);
    let ra = Math.atan2(y,x);
    return({ra:ra, dec:dec});
}

// Precession matrix given by J. Vondrak, N. Capitaine, P. Wallace, 
// A&A 534, A22 (2011), DOI: 10.1051/0004-6361/201117274
// with correction from A&A 541, C1 (2012), DOI: 10.1051/0004-6361/201117274e
// The matrix precesses from T0=0 (J2000) to T (century from J2000).
// It is valid for |T| < 2000.
// The periodic coefficients are taken from Tables 4 and 6 of the paper.
// The matrix is computed using Eq. (20) in the paper.
function precessionMatrixVondrak(T) {
    let omega = [0.01559490024120026, 0.0244719973015758, 0.02151775790129995, 0.01169573974755144, 0.02602271819084525, 0.01674533688817117, 0.0397997422384214, 0.02291460724719032, 0.03095165175950535, 0.01427996660722633, 0.03680403764749055, 0.008807750966790847, 0.02007407446383254, 0.0489420883874403, 0.03110487775831478, 0.01994662002279234, 0.04609144151393476, 0.01282282715750936];
    let cPsiA = [-0.1076593062579846, 0.05932495062847037, -0.007703729840835942, 0.01203357586861691, 0.000728786082003343, -6.609012098588148e-05, 0.001888045891520004, 0.009848668946298234, 0.001763501537747769, -0.004347554865592219, -0.004494201976897112, 0.000179723665294558, -0.002897646374457124, 0.0003213481408001133, 0, 0, 0, 0];
    let sPsiA = [-0.01572365411244583, -0.01924576393436911, 0.03441793111567203, -0.009229382101760265, 0.0007099369818066644, 0.00630563269451746, 0.008375146833970948, 0.001453733482001713, -0.005900793277074788, -0.002285254065278213, -0.002141335465978059, -0.0004177599299066708, -0.001494779621447613, -0.002049868015261339, 0, 0, 0, 0];
    let cOmgA = [0.00614611792998422, 0.008253100851149026, -0.01440165141619654, 0.003363590350788535, -7.138615291626988e-05, -0.002504786979418468, -0.00172978832643207, -0.0006280861013429611, 0.001241749955604002, 0.0009224361511874661, 0.0004610771596491818, -0.001613979006196489, 0.0006367428132294327, 0.0004010956619564596, 0, 0, 0, 0];
    let sOmgA = [-0.04155568953790275, 0.0257426196723017, -0.002959273392809311, 0.004475809265755418, 1.822441292043207e-05, -0.0001972760876678778, 0.000389971927172294, 0.003913904086152674, 0.0004058488092230152, -0.001787289168266385, -0.0009302656497305446, -2.067134029104406e-05, -0.0013107116813526, 5.625225752812272e-05, 0, 0, 0, 0];
    let cChiA = [-0.06673908312554792, 0.06550733801292973, -0.007055149797375992, 0.005111848628877972, 0, -0.0005444464620177098, 0.0009830562551572195, 0.009386235733694169, 0, -0.003177877146985308, -0.004324046613805478, 0, 0, -0.001615990759958801, 0.001587849478343136, -0.002398762740975183, 0.002838548328494804, 0.0005357813386138708];
    let sChiA = [-0.01069967856443793, -0.02029794993715239, 0.03266650186037179, -0.0041544791939612, 0, 0.004640389727239152, 0.008287602553739408, 0.0007486759753624905, 0, -0.00118062300801947, -0.001970956729830991, 0, 0, -0.002165451504436122, -0.005086043543188153, -0.001461733557390353, 0.0002004643484864111, 0.000690981600754813];
    
    let psiA = 0.04107992866630529 + T*(0.02444817476355586 
                                        + T*(-3.592047589119096e-08 + 1.401111538406559e-12*T));
    let omgA = 0.4086163677095374 + T*(-2.150908863572772e-06 
                                       + T*(7.078279744199225e-12 + 7.320686584753994e-13*T));
    let chiA = -9.530113429264049e-05 + T*(3.830798934518299e-07 
                                           + T*(7.13645738593237e-11 - 2.957363454768169e-13*T));
    for (let i=0; i<18; i++) {
        let ang = omega[i]*T;
        let cosAng = Math.cos(ang), sinAng = Math.sin(ang);
        psiA += cPsiA[i]*cosAng + sPsiA[i]*sinAng;
        omgA += cOmgA[i]*cosAng + sOmgA[i]*sinAng;
        chiA += cChiA[i]*cosAng + sChiA[i]*sinAng;
    }
    let cEps = 0.9174821430652418, sEps = 0.397776969112606;
    let sPsi = Math.sin(psiA), cPsi = Math.cos(psiA);
    let sOmg = Math.sin(omgA), cOmg = Math.cos(omgA);
    let sChi = Math.sin(chiA), cChi = Math.cos(chiA);
    
    let p = {};
    p.p11 = cChi*cPsi + sChi*cOmg*sPsi;
    p.p12 = (-cChi*sPsi + sChi*cOmg*cPsi)*cEps + sChi*sOmg*sEps;
    p.p13 = (-cChi*sPsi + sChi*cOmg*cPsi)*sEps - sChi*sOmg*cEps;
    p.p21 = -sChi*cPsi + cChi*cOmg*sPsi;
    p.p22 = (sChi*sPsi + cChi*cOmg*cPsi)*cEps + cChi*sOmg*sEps;
    p.p23 = (sChi*sPsi + cChi*cOmg*cPsi)*sEps - cChi*sOmg*cEps;
    p.p31 = sOmg*sPsi;
    p.p32 = sOmg*cPsi*cEps - cOmg*sEps;
    p.p33 = sOmg*cPsi*sEps + cOmg*cEps;
    
    return p;
}

// Compute the Ra and Dec of the ecliptic north pole 
// at time T (Julian century from J2000)
// with respect to the J2000.0 mean equator 
// and equinox. They are calculated by 
// ra = gamma - pi/2 and dec = pi/2 - phi, 
// where gamma and phi are given by equation 
// (14) and Table 7 in the paper 
// New precession expressions, valid for long time intervals,
// by Vondrak, Capitaine and Wallace, A&A 534, A22 (2011).
// The relation between ra and dec (of the ecliptic north pole)
// and gamma, phi follows from the definition of the angles 
// gamma and phi.
function getEclipticNorthPole(T) {
    // periodic coefficients from Table 7
    // 2*pi/periods :
    let omega = [0.008872675714438448, 0.002721171635850839, 0.01276551261109221, 0.005311230183583759, 0.01010158409514403, 0.01774911103723047, 0.006457538856299678, 0.01169573974755144, 0.01402496720352586, 0.01559490024120026];
    let coefCosPhi = [-0.004042409513143679, 0.01369057902014126, -0.00272231303641459, 6.066147796929918e-05, -0.002643611413508775, 0.0003705237378617317, 0.0001300171245300725, 0.001793366356240462, 0.0006949647136035256, -0.0002841056070893575];
    let coefSinPhi = [-0.02679541800930862, -0.005879989388723328, 0.002379320151262638, -0.001124940920469153, -0.0002535950507103844, -0.0002334436585479198, -4.630035619629337e-05, 0.0001949605448048464, -0.0001582323402321061, 6.429759997016795e-05];
    let coefCosGamma = [-0.07027648004398257, -0.01050635377614501, 0.009206833364122355, -0.004338070256775063, 0.00159873402544959, -0.001266401388354526, 0.002365565589582342, -0.001406551395163585, -0.002497496966995317, 0.001041115112690355];
    let coefSinGamma = [0.01094614582138286, -0.03731722874613446, 0.004834754426333641, 0.001314243946566702, 0.005865328196370537, -0.001594566164651417, -0.001397371249338167, -0.003275851922070258, -0.0005344059415931104, 0.0001760885226173251];
    
    let T2 = T*T;
    let T3 = T*T2;
    let phi = 0.4020449277403929 + 8.343285174584774e-06*T 
            + 1.073862303657622e-09*T2 -3.456721546310992e-12*T3;
    let gamma = 0.07607910574041958 + 8.044557043881831e-06*T 
            - 8.706623454941823e-09*T2 - 3.616710061077139e-12*T3;
    
    for (let i=0; i<10; i++) {
        let cosOmegaT = Math.cos(omega[i]*T);
        let sinOmegaT = Math.sin(omega[i]*T);
        phi += coefCosPhi[i]*cosOmegaT + coefSinPhi[i]*sinOmegaT;
        gamma += (coefCosGamma[i]*cosOmegaT 
                 + coefSinGamma[i]*sinOmegaT);
    }
    return {ra:gamma-0.5*Math.PI, dec:0.5*Math.PI-phi};
}

// Compute the mean obliquity of the ecliptic at time T 
// (Julian century from J2000). They are calculated using 
// equation (10) and Table 3 in the paper 
// New precession expressions, valid for long time intervals,
// by Vondrak, Capitaine and Wallace, A&A 534, A22 (2011).
function epsA(T) {
    let omega = [0.01532858089089921, 0.015860621752315, 0.01169573974755144, 0.01559490024120026, 0.01506217261699529, 0.02174714560147994, 0.001554089860791389, 0.02053328531758035, 0.02268297944830176, 0.03095165175950535];
    let cEps = [0.003654878375600794, -0.001201396532490081, 0.001839729670341384, -0.0002612203166421586, -0.0004368615016759239, -0.001714302097549313, -0.0003059918662245779, -0.0001369510752414054, 8.582844219576704e-05, 0.0001886473398345326];
    let sEps = [-0.008264717248747798, -0.004180588892934996, 0.00217115166735481, -0.004312766318139272, 0.000923099046629921, -0.0002742348150863777, -0.001436127797997386, -0.0003677794257791271, 0.0003271207736678532, 1.461255099616602e-05];
    let eps = 0.4073802401575857 + T*(1.757180522429052e-06 
                                       - T*(1.958162458001416e-10 
                                            + 5.332950492204896e-13*T));
    for (let i=0; i<10; i++) {
        let ang = omega[i]*T;
        let cosAng = Math.cos(ang), sinAng = Math.sin(ang);
        eps += cEps[i]*cosAng + sEps[i]*sinAng;
    }
    return eps;
}

// Compute the nutation matrix and the equation of equinoxes. 
// Using equations from Kaplan (2005): The IAU Resolutions on 
// Astronomical Reference Systems, Time Scales, 
// and Earth Rotation Models. Circular 179, U.S. Naval Observatory, 
// Washington, D.C.
// http://aa.usno.navy.mil/publications/docs/Circular_179.pdf
// All angles are converted to radians
function nutation(T) {
    let T2 = T*T;
    let T3 = T*T2;
    let T4 = T2*T2;
    let T5 = T2*T3;
    let tpi = 2*Math.PI;
    let mod2pi = function(x) { 
        return x - tpi*Math.floor((x+Math.PI)/tpi);
    }
    // Compute the mean obliquity of ecliptic from Eq. (5.12) 
    // in Kaplan (2005)
    let epsA = 0.4090926006005829 - 0.00022707106390167*T 
        - 8.876938501115605e-10*T2 + 
        9.712757287348442e-09*T3 - 2.792526803190927e-12*T4 
        - 2.104091376015386e-13*T5;
    
    // Compute the angles L, Lp, F, D, Omega using Eq. (5.19)
    // in Kaplan (2005)
    let L = mod2pi(2.355555743493879 + mod2pi(8328.691425719086*T) 
                   + 0.0001545547230282712*T2 + 
                   2.503335442409089e-07*T3 
                   - 1.186339077675034e-09*T4 );
    let Lp = mod2pi( -0.04312518025660639 + 
                     mod2pi(628.3019551713968*T) 
                     - 2.681989283897953e-06*T2 + 
                     6.593466063089689e-10*T3 
                     - 5.570509195948569e-11*T4);
    let F = mod2pi( 1.627905081537519 + mod2pi(8433.466156916373*T) 
                   - 6.181956210563916e-05*T2 
                   - 5.027517873105888e-09*T3 
                   + 2.021673050226765e-11*T4);
    let D = mod2pi( -1.084718718529083 + mod2pi(7771.377145593714*T) 
                   - 3.08855403687641e-05*T2 + 
                     3.196376599555171e-08*T3 
                   - 1.53637455543612e-10*T4); 
    let Omg = mod2pi( 2.182439196615671 + mod2pi(-33.75704595363087*T) 
                     + 3.622624787986675e-05*T2 + 
                     3.734034971905646e-08*T3 
                     - 2.879308452109534e-10*T4);
    let Dpsi = -(8.341905928143386e-05 + 
                 8.46804664246782e-08*T)*Math.sin(Omg) 
               - 6.385435421407674e-06*Math.sin(2*(F-D+Omg)) 
               - 1.103636166255602e-06*Math.sin(2*(F+Omg)) + 
                 1.005772161400512e-06*Math.sin(2*Omg) + 
                 7.155253612348986e-07*Math.sin(Lp) 
               - 2.505618914847115e-07*Math.sin(Lp + 2*(F-D+Omg)) + 
                 3.447796126441765e-07*Math.sin(L);
    let Deps = 4.462822944682345e-05*Math.cos(Omg) + 
               2.778145290154494e-06*Math.cos(2*(F-D+Omg)) + 
               4.743703096047555e-07*Math.cos(2*(F+Omg)) 
               - 4.351164002863597e-07*Math.cos(2*Omg);
    let eps = epsA + Deps;
    let cosDpsi = Math.cos(Dpsi), sinDpsi = Math.sin(Dpsi);
    let cosEpsA = Math.cos(epsA), sinEpsA = Math.sin(epsA);
    let cosEps = Math.cos(eps), sinEps = Math.sin(eps);
    // Ee: dominant term of the equation of equinoxes
    let out = {Ee:Dpsi*cosEpsA};
    // Nutation matrix from Eq. (6.41) in Explanatory Supplement 
    // to the Astronomical Almanac
    out.p11 = cosDpsi; 
    out.p12 = -sinDpsi*cosEpsA; 
    out.p13 = -sinDpsi*sinEpsA;
    out.p21 = sinDpsi*cosEps;
    out.p22 = cosDpsi*cosEps*cosEpsA + sinEps*sinEpsA;
    out.p23 = cosDpsi*cosEps*sinEpsA - sinEps*cosEpsA;
    out.p31 = sinDpsi*sinEps;
    out.p32 = cosDpsi*sinEps*cosEpsA - cosEps*sinEpsA;
    out.p33 = cosDpsi*sinEps*sinEpsA + cosEps*cosEpsA;
    return out;
}

/*
 * From ftp://cdsarc.u-strasbg.fr/pub/cats/VI/42/data.dat .
 * This table gives the constellation boundaries.
 * Each constellation is bounded by lines of 
 * constant RA or constant declination,
 * in the 1875 equinox coordinate system.
 *
 * Each line of the table consists of 
 * (1) lower right ascension boundary (hours)
 * (2) upper right ascension boundary (hours)
 * (3) lower (southern) declination boundary (degrees)
 * (4) constellation abbreviation (3 letters)
 */
function constellation_boundaries() {
    return [[0.0000,24.0000,88.0000,'UMi'],
            [8.0000,14.5000,86.5000,'UMi'],
            [21.0000,23.0000,86.1667,'UMi'],
            [18.0000,21.0000,86.0000,'UMi'],
            [0.0000,8.0000,85.0000,'Cep'],
            [9.1667,10.6667,82.0000,'Cam'],
            [0.0000,5.0000,80.0000,'Cep'],
            [10.6667,14.5000,80.0000,'Cam'],
            [17.5000,18.0000,80.0000,'UMi'],
            [20.1667,21.0000,80.0000,'Dra'],
            [0.0000,3.5083,77.0000,'Cep'],
            [11.5000,13.5833,77.0000,'Cam'],
            [16.5333,17.5000,75.0000,'UMi'],
            [20.1667,20.6667,75.0000,'Cep'],
            [7.9667,9.1667,73.5000,'Cam'],
            [9.1667,11.3333,73.5000,'Dra'],
            [13.0000,16.5333,70.0000,'UMi'],
            [3.1000,3.4167,68.0000,'Cas'],
            [20.4167,20.6667,67.0000,'Dra'],
            [11.3333,12.0000,66.5000,'Dra'],
            [0.0000,0.3333,66.0000,'Cep'],
            [14.0000,15.6667,66.0000,'UMi'],
            [23.5833,24.0000,66.0000,'Cep'],
            [12.0000,13.5000,64.0000,'Dra'],
            [13.5000,14.4167,63.0000,'Dra'],
            [23.1667,23.5833,63.0000,'Cep'],
            [6.1000,7.0000,62.0000,'Cam'],
            [20.0000,20.4167,61.5000,'Dra'],
            [20.5367,20.6000,60.9167,'Cep'],
            [7.0000,7.9667,60.0000,'Cam'],
            [7.9667,8.4167,60.0000,'UMa'],
            [19.7667,20.0000,59.5000,'Dra'],
            [20.0000,20.5367,59.5000,'Cep'],
            [22.8667,23.1667,59.0833,'Cep'],
            [0.0000,2.4333,58.5000,'Cas'],
            [19.4167,19.7667,58.0000,'Dra'],
            [1.7000,1.9083,57.5000,'Cas'],
            [2.4333,3.1000,57.0000,'Cas'],
            [3.1000,3.1667,57.0000,'Cam'],
            [22.3167,22.8667,56.2500,'Cep'],
            [5.0000,6.1000,56.0000,'Cam'],
            [14.0333,14.4167,55.5000,'UMa'],
            [14.4167,19.4167,55.5000,'Dra'],
            [3.1667,3.3333,55.0000,'Cam'],
            [22.1333,22.3167,55.0000,'Cep'],
            [20.6000,21.9667,54.8333,'Cep'],
            [0.0000,1.7000,54.0000,'Cas'],
            [6.1000,6.5000,54.0000,'Lyn'],
            [12.0833,13.5000,53.0000,'UMa'],
            [15.2500,15.7500,53.0000,'Dra'],
            [21.9667,22.1333,52.7500,'Cep'],
            [3.3333,5.0000,52.5000,'Cam'],
            [22.8667,23.3333,52.5000,'Cas'],
            [15.7500,17.0000,51.5000,'Dra'],
            [2.0417,2.5167,50.5000,'Per'],
            [17.0000,18.2333,50.5000,'Dra'],
            [0.0000,1.3667,50.0000,'Cas'],
            [1.3667,1.6667,50.0000,'Per'],
            [6.5000,6.8000,50.0000,'Lyn'],
            [23.3333,24.0000,50.0000,'Cas'],
            [13.5000,14.0333,48.5000,'UMa'],
            [0.0000,1.1167,48.0000,'Cas'],
            [23.5833,24.0000,48.0000,'Cas'],
            [18.1750,18.2333,47.5000,'Her'],
            [18.2333,19.0833,47.5000,'Dra'],
            [19.0833,19.1667,47.5000,'Cyg'],
            [1.6667,2.0417,47.0000,'Per'],
            [8.4167,9.1667,47.0000,'UMa'],
            [0.1667,0.8667,46.0000,'Cas'],
            [12.0000,12.0833,45.0000,'UMa'],
            [6.8000,7.3667,44.5000,'Lyn'],
            [21.9083,21.9667,44.0000,'Cyg'],
            [21.8750,21.9083,43.7500,'Cyg'],
            [19.1667,19.4000,43.5000,'Cyg'],
            [9.1667,10.1667,42.0000,'UMa'],
            [10.1667,10.7833,40.0000,'UMa'],
            [15.4333,15.7500,40.0000,'Boo'],
            [15.7500,16.3333,40.0000,'Her'],
            [9.2500,9.5833,39.7500,'Lyn'],
            [0.0000,2.5167,36.7500,'And'],
            [2.5167,2.5667,36.7500,'Per'],
            [19.3583,19.4000,36.5000,'Lyr'],
            [4.5000,4.6917,36.0000,'Per'],
            [21.7333,21.8750,36.0000,'Cyg'],
            [21.8750,22.0000,36.0000,'Lac'],
            [6.5333,7.3667,35.5000,'Aur'],
            [7.3667,7.7500,35.5000,'Lyn'],
            [0.0000,2.0000,35.0000,'And'],
            [22.0000,22.8167,35.0000,'Lac'],
            [22.8167,22.8667,34.5000,'Lac'],
            [22.8667,23.5000,34.5000,'And'],
            [2.5667,2.7167,34.0000,'Per'],
            [10.7833,11.0000,34.0000,'UMa'],
            [12.0000,12.3333,34.0000,'CVn'],
            [7.7500,9.2500,33.5000,'Lyn'],
            [9.2500,9.8833,33.5000,'LMi'],
            [0.7167,1.4083,33.0000,'And'],
            [15.1833,15.4333,33.0000,'Boo'],
            [23.5000,23.7500,32.0833,'And'],
            [12.3333,13.2500,32.0000,'CVn'],
            [23.7500,24.0000,31.3333,'And'],
            [13.9583,14.0333,30.7500,'CVn'],
            [2.4167,2.7167,30.6667,'Tri'],
            [2.7167,4.5000,30.6667,'Per'],
            [4.5000,4.7500,30.0000,'Aur'],
            [18.1750,19.3583,30.0000,'Lyr'],
            [11.0000,12.0000,29.0000,'UMa'],
            [19.6667,20.9167,29.0000,'Cyg'],
            [4.7500,5.8833,28.5000,'Aur'],
            [9.8833,10.5000,28.5000,'LMi'],
            [13.2500,13.9583,28.5000,'CVn'],
            [0.0000,0.0667,28.0000,'And'],
            [1.4083,1.6667,28.0000,'Tri'],
            [5.8833,6.5333,28.0000,'Aur'],
            [7.8833,8.0000,28.0000,'Gem'],
            [20.9167,21.7333,28.0000,'Cyg'],
            [19.2583,19.6667,27.5000,'Cyg'],
            [1.9167,2.4167,27.2500,'Tri'],
            [16.1667,16.3333,27.0000,'CrB'],
            [15.0833,15.1833,26.0000,'Boo'],
            [15.1833,16.1667,26.0000,'CrB'],
            [18.3667,18.8667,26.0000,'Lyr'],
            [10.7500,11.0000,25.5000,'LMi'],
            [18.8667,19.2583,25.5000,'Lyr'],
            [1.6667,1.9167,25.0000,'Tri'],
            [0.7167,0.8500,23.7500,'Psc'],
            [10.5000,10.7500,23.5000,'LMi'],
            [21.2500,21.4167,23.5000,'Vul'],
            [5.7000,5.8833,22.8333,'Tau'],
            [0.0667,0.1417,22.0000,'And'],
            [15.9167,16.0333,22.0000,'Ser'],
            [5.8833,6.2167,21.5000,'Gem'],
            [19.8333,20.2500,21.2500,'Vul'],
            [18.8667,19.2500,21.0833,'Vul'],
            [0.1417,0.8500,21.0000,'And'],
            [20.2500,20.5667,20.5000,'Vul'],
            [7.8083,7.8833,20.0000,'Gem'],
            [20.5667,21.2500,19.5000,'Vul'],
            [19.2500,19.8333,19.1667,'Vul'],
            [3.2833,3.3667,19.0000,'Ari'],
            [18.8667,19.0000,18.5000,'Sge'],
            [5.7000,5.7667,18.0000,'Ori'],
            [6.2167,6.3083,17.5000,'Gem'],
            [19.0000,19.8333,16.1667,'Sge'],
            [4.9667,5.3333,16.0000,'Tau'],
            [15.9167,16.0833,16.0000,'Her'],
            [19.8333,20.2500,15.7500,'Sge'],
            [4.6167,4.9667,15.5000,'Tau'],
            [5.3333,5.6000,15.5000,'Tau'],
            [12.8333,13.5000,15.0000,'Com'],
            [17.2500,18.2500,14.3333,'Her'],
            [11.8667,12.8333,14.0000,'Com'],
            [7.5000,7.8083,13.5000,'Gem'],
            [16.7500,17.2500,12.8333,'Her'],
            [0.0000,0.1417,12.5000,'Peg'],
            [5.6000,5.7667,12.5000,'Tau'],
            [7.0000,7.5000,12.5000,'Gem'],
            [21.1167,21.3333,12.5000,'Peg'],
            [6.3083,6.9333,12.0000,'Gem'],
            [18.2500,18.8667,12.0000,'Her'],
            [20.8750,21.0500,11.8333,'Del'],
            [21.0500,21.1167,11.8333,'Peg'],
            [11.5167,11.8667,11.0000,'Leo'],
            [6.2417,6.3083,10.0000,'Ori'],
            [6.9333,7.0000,10.0000,'Gem'],
            [7.8083,7.9250,10.0000,'Cnc'],
            [23.8333,24.0000,10.0000,'Peg'],
            [1.6667,3.2833,9.9167,'Ari'],
            [20.1417,20.3000,8.5000,'Del'],
            [13.5000,15.0833,8.0000,'Boo'],
            [22.7500,23.8333,7.5000,'Peg'],
            [7.9250,9.2500,7.0000,'Cnc'],
            [9.2500,10.7500,7.0000,'Leo'],
            [18.2500,18.6622,6.2500,'Oph'],
            [18.6622,18.8667,6.2500,'Aql'],
            [20.8333,20.8750,6.0000,'Del'],
            [7.0000,7.0167,5.5000,'CMi'],
            [18.2500,18.4250,4.5000,'Ser'],
            [16.0833,16.7500,4.0000,'Her'],
            [18.2500,18.4250,3.0000,'Oph'],
            [21.4667,21.6667,2.7500,'Peg'],
            [0.0000,2.0000,2.0000,'Psc'],
            [18.5833,18.8667,2.0000,'Ser'],
            [20.3000,20.8333,2.0000,'Del'],
            [20.8333,21.3333,2.0000,'Equ'],
            [21.3333,21.4667,2.0000,'Peg'],
            [22.0000,22.7500,2.0000,'Peg'],
            [21.6667,22.0000,1.7500,'Peg'],
            [7.0167,7.2000,1.5000,'CMi'],
            [3.5833,4.6167,0.0000,'Tau'],
            [4.6167,4.6667,0.0000,'Ori'],
            [7.2000,8.0833,0.0000,'CMi'],
            [14.6667,15.0833,0.0000,'Vir'],
            [17.8333,18.2500,0.0000,'Oph'],
            [2.6500,3.2833,-1.7500,'Cet'],
            [3.2833,3.5833,-1.7500,'Tau'],
            [15.0833,16.2667,-3.2500,'Ser'],
            [4.6667,5.0833,-4.0000,'Ori'],
            [5.8333,6.2417,-4.0000,'Ori'],
            [17.8333,17.9667,-4.0000,'Ser'],
            [18.2500,18.5833,-4.0000,'Ser'],
            [18.5833,18.8667,-4.0000,'Aql'],
            [22.7500,23.8333,-4.0000,'Psc'],
            [10.7500,11.5167,-6.0000,'Leo'],
            [11.5167,11.8333,-6.0000,'Vir'],
            [0.0000,0.3333,-7.0000,'Psc'],
            [23.8333,24.0000,-7.0000,'Psc'],
            [14.2500,14.6667,-8.0000,'Vir'],
            [15.9167,16.2667,-8.0000,'Oph'],
            [20.0000,20.5333,-9.0000,'Aql'],
            [21.3333,21.8667,-9.0000,'Aqr'],
            [17.1667,17.9667,-10.0000,'Oph'],
            [5.8333,8.0833,-11.0000,'Mon'],
            [4.9167,5.0833,-11.0000,'Eri'],
            [5.0833,5.8333,-11.0000,'Ori'],
            [8.0833,8.3667,-11.0000,'Hya'],
            [9.5833,10.7500,-11.0000,'Sex'],
            [11.8333,12.8333,-11.0000,'Vir'],
            [17.5833,17.6667,-11.6667,'Oph'],
            [18.8667,20.0000,-12.0333,'Aql'],
            [4.8333,4.9167,-14.5000,'Eri'],
            [20.5333,21.3333,-15.0000,'Aqr'],
            [17.1667,18.2500,-16.0000,'Ser'],
            [18.2500,18.8667,-16.0000,'Sct'],
            [8.3667,8.5833,-17.0000,'Hya'],
            [16.2667,16.3750,-18.2500,'Oph'],
            [8.5833,9.0833,-19.0000,'Hya'],
            [10.7500,10.8333,-19.0000,'Crt'],
            [16.2667,16.3750,-19.2500,'Sco'],
            [15.6667,15.9167,-20.0000,'Lib'],
            [12.5833,12.8333,-22.0000,'Crv'],
            [12.8333,14.2500,-22.0000,'Vir'],
            [9.0833,9.7500,-24.0000,'Hya'],
            [1.6667,2.6500,-24.3833,'Cet'],
            [2.6500,3.7500,-24.3833,'Eri'],
            [10.8333,11.8333,-24.5000,'Crt'],
            [11.8333,12.5833,-24.5000,'Crv'],
            [14.2500,14.9167,-24.5000,'Lib'],
            [16.2667,16.7500,-24.5833,'Oph'],
            [0.0000,1.6667,-25.5000,'Cet'],
            [21.3333,21.8667,-25.5000,'Cap'],
            [21.8667,23.8333,-25.5000,'Aqr'],
            [23.8333,24.0000,-25.5000,'Cet'],
            [9.7500,10.2500,-26.5000,'Hya'],
            [4.7000,4.8333,-27.2500,'Eri'],
            [4.8333,6.1167,-27.2500,'Lep'],
            [20.0000,21.3333,-28.0000,'Cap'],
            [10.2500,10.5833,-29.1667,'Hya'],
            [12.5833,14.9167,-29.5000,'Hya'],
            [14.9167,15.6667,-29.5000,'Lib'],
            [15.6667,16.0000,-29.5000,'Sco'],
            [4.5833,4.7000,-30.0000,'Eri'],
            [16.7500,17.6000,-30.0000,'Oph'],
            [17.6000,17.8333,-30.0000,'Sgr'],
            [10.5833,10.8333,-31.1667,'Hya'],
            [6.1167,7.3667,-33.0000,'CMa'],
            [12.2500,12.5833,-33.0000,'Hya'],
            [10.8333,12.2500,-35.0000,'Hya'],
            [3.5000,3.7500,-36.0000,'For'],
            [8.3667,9.3667,-36.7500,'Pyx'],
            [4.2667,4.5833,-37.0000,'Eri'],
            [17.8333,19.1667,-37.0000,'Sgr'],
            [21.3333,23.0000,-37.0000,'PsA'],
            [23.0000,23.3333,-37.0000,'Scl'],
            [3.0000,3.5000,-39.5833,'For'],
            [9.3667,11.0000,-39.7500,'Ant'],
            [0.0000,1.6667,-40.0000,'Scl'],
            [1.6667,3.0000,-40.0000,'For'],
            [3.8667,4.2667,-40.0000,'Eri'],
            [23.3333,24.0000,-40.0000,'Scl'],
            [14.1667,14.9167,-42.0000,'Cen'],
            [15.6667,16.0000,-42.0000,'Lup'],
            [16.0000,16.4208,-42.0000,'Sco'],
            [4.8333,5.0000,-43.0000,'Cae'],
            [5.0000,6.5833,-43.0000,'Col'],
            [8.0000,8.3667,-43.0000,'Pup'],
            [3.4167,3.8667,-44.0000,'Eri'],
            [16.4208,17.8333,-45.5000,'Sco'],
            [17.8333,19.1667,-45.5000,'CrA'],
            [19.1667,20.3333,-45.5000,'Sgr'],
            [20.3333,21.3333,-45.5000,'Mic'],
            [3.0000,3.4167,-46.0000,'Eri'],
            [4.5000,4.8333,-46.5000,'Cae'],
            [15.3333,15.6667,-48.0000,'Lup'],
            [0.0000,2.3333,-48.1667,'Phe'],
            [2.6667,3.0000,-49.0000,'Eri'],
            [4.0833,4.2667,-49.0000,'Hor'],
            [4.2667,4.5000,-49.0000,'Cae'],
            [21.3333,22.0000,-50.0000,'Gru'],
            [6.0000,8.0000,-50.7500,'Pup'],
            [8.0000,8.1667,-50.7500,'Vel'],
            [2.4167,2.6667,-51.0000,'Eri'],
            [3.8333,4.0833,-51.0000,'Hor'],
            [0.0000,1.8333,-51.5000,'Phe'],
            [6.0000,6.1667,-52.5000,'Car'],
            [8.1667,8.4500,-53.0000,'Vel'],
            [3.5000,3.8333,-53.1667,'Hor'],
            [3.8333,4.0000,-53.1667,'Dor'],
            [0.0000,1.5833,-53.5000,'Phe'],
            [2.1667,2.4167,-54.0000,'Eri'],
            [4.5000,5.0000,-54.0000,'Pic'],
            [15.0500,15.3333,-54.0000,'Lup'],
            [8.4500,8.8333,-54.5000,'Vel'],
            [6.1667,6.5000,-55.0000,'Car'],
            [11.8333,12.8333,-55.0000,'Cen'],
            [14.1667,15.0500,-55.0000,'Lup'],
            [15.0500,15.3333,-55.0000,'Nor'],
            [4.0000,4.3333,-56.5000,'Dor'],
            [8.8333,11.0000,-56.5000,'Vel'],
            [11.0000,11.2500,-56.5000,'Cen'],
            [17.5000,18.0000,-57.0000,'Ara'],
            [18.0000,20.3333,-57.0000,'Tel'],
            [22.0000,23.3333,-57.0000,'Gru'],
            [3.2000,3.5000,-57.5000,'Hor'],
            [5.0000,5.5000,-57.5000,'Pic'],
            [6.5000,6.8333,-58.0000,'Car'],
            [0.0000,1.3333,-58.5000,'Phe'],
            [1.3333,2.1667,-58.5000,'Eri'],
            [23.3333,24.0000,-58.5000,'Phe'],
            [4.3333,4.5833,-59.0000,'Dor'],
            [15.3333,16.4208,-60.0000,'Nor'],
            [20.3333,21.3333,-60.0000,'Ind'],
            [5.5000,6.0000,-61.0000,'Pic'],
            [15.1667,15.3333,-61.0000,'Cir'],
            [16.4208,16.5833,-61.0000,'Ara'],
            [14.9167,15.1667,-63.5833,'Cir'],
            [16.5833,16.7500,-63.5833,'Ara'],
            [6.0000,6.8333,-64.0000,'Pic'],
            [6.8333,9.0333,-64.0000,'Car'],
            [11.2500,11.8333,-64.0000,'Cen'],
            [11.8333,12.8333,-64.0000,'Cru'],
            [12.8333,14.5333,-64.0000,'Cen'],
            [13.5000,13.6667,-65.0000,'Cir'],
            [16.7500,16.8333,-65.0000,'Ara'],
            [2.1667,3.2000,-67.5000,'Hor'],
            [3.2000,4.5833,-67.5000,'Ret'],
            [14.7500,14.9167,-67.5000,'Cir'],
            [16.8333,17.5000,-67.5000,'Ara'],
            [17.5000,18.0000,-67.5000,'Pav'],
            [22.0000,23.3333,-67.5000,'Tuc'],
            [4.5833,6.5833,-70.0000,'Dor'],
            [13.6667,14.7500,-70.0000,'Cir'],
            [14.7500,17.0000,-70.0000,'TrA'],
            [0.0000,1.3333,-75.0000,'Tuc'],
            [3.5000,4.5833,-75.0000,'Hyi'],
            [6.5833,9.0333,-75.0000,'Vol'],
            [9.0333,11.2500,-75.0000,'Car'],
            [11.2500,13.6667,-75.0000,'Mus'],
            [18.0000,21.3333,-75.0000,'Pav'],
            [21.3333,23.3333,-75.0000,'Ind'],
            [23.3333,24.0000,-75.0000,'Tuc'],
            [0.7500,1.3333,-76.0000,'Tuc'],
            [0.0000,3.5000,-82.5000,'Hyi'],
            [7.6667,13.6667,-82.5000,'Cha'],
            [13.6667,18.0000,-82.5000,'Aps'],
            [3.5000,7.6667,-85.0000,'Men'],
            [0.0000,24.0000,-90.0000,'Oct']]; 
}

// Find constellation from ra and dec (in radians) in J20000
// Modified from http://djm.cc/constellation.js
function get_constellation(ra, dec) {  
    // Precession matrix for the epoch 1875
    //let p = precessionMatrixVondrak(-1.25);
    let p11 = 0.9995359166195085, p12 = 0.027935620786950072, p13 = 0.012147118129294652, p21 = -0.027935619338023538, p22 = 0.9996097100023043, p23 = -0.00016982729487996506, p31 = -0.012147121461496999, p32 = -0.00016958878725908955, p33 = 0.9999262066171897;
    let x = Math.cos(dec)*Math.cos(ra);
    let y = Math.cos(dec)*Math.sin(ra);
    let z = Math.sin(dec);
    let x1 = p11*x + p12*y + p13*z;
    let y1 = p21*x + p22*y + p23*z;
    let z1 = p31*x + p32*y + p33*z;
    let rah = Math.atan2(y1,x1)*12.0/Math.PI;
    if (rah < 0) {rah +=24;}
    let decd = Math.asin(z1)*180.0/Math.PI;
    let con = constellation_boundaries();
    let n = con.length;
    let conste = '';
    for (let i=0; i<n; i++) {
        if (decd > con[i][2] && rah >= con[i][0] && rah < con[i][1]) {
            conste = con[i][3];
            break;
        }
    }
    return conste;
}
